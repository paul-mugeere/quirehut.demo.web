image: $CAKEBUILD_REGISTRY_PREFIX/quirehut.demo.cakebuild:dotnet8_ubuntu24.04

services:
  - name: docker:dind  # Enables networking; doesn't start a new daemon
    command: ["--registry-mirror=https://registry-1.docker.io"] # caches images which improves performance  

variables:
  DOCKER_HOST: tcp://docker:2375 # instruct the CI/CD jobs to communicate with the DinD service over TCP
  DOCKER_TLS_CERTDIR: "" # disable TLS verification for DinD(keep it simple), otherwise we need to specifiy the directory where TLS certificates are stored
  # CI_AWS_ECS_CLUSTER: quirehut-demo
  # CI_AWS_ECS_SERVICE: quirehut-demo
  # CI_AWS_ECS_TASK_DEFINITION: quirehut-demo


stages:
  # - validate_cfn_tmpl
  - build
#  - s3_upload_cfn_tmpl
  # - fargate_deploy

cache:
 key: "$CI_COMMIT_REF_SLUG"
 paths:
   - tools/
    - .nuget/packages/

#before_script:
#  - dotnet nuget add source "https://gitlab.com/api/v4/projects/64329060/packages/nuget/index.json" --name GitLab --username "gitlab-ci-token" --password "$CI_JOB_TOKEN" --store-password-in-clear-text

# validate_cfn_tmps:
#   stage: validate_cfn_tmpl
#   image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
#   script:
#     - echo "Validating cfn templates"
#     - find ./deploy -type f \( -name "*.yml" -o -name "*.yaml" -o -name "*.json" \) -exec sh -c 'echo "Validating {}"; aws cloudformation validate-template --template-body file://{}' \;

# analyse_cfn_tmpl:
#   stage: validate_cfn_tmpl
#   allow_failure: true  # True for AutoDevOps compatibility
#   image:
#     name: bridgecrew/checkov:latest
#     entrypoint:
#       - '/usr/bin/env'
#       - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
#   rules:
#     - if: $SAST_DISABLED
#       when: never
#     - if: $CI_COMMIT_BRANCH
#       exists:
#         - '**/*.yml'
#         - '**/*.yaml'
#         - '**/*.json'
#   script:
#     - checkov -d ./deploy --quiet


#s3_upload_cfn_tmpl:
#  stage: s3_upload_cfn_tmpl
#
# deploy:
#  stage: fargate_deploy
#  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
#  script:
#    - echo "Deploying to Fargate"
#    - aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
#    - aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
#    - aws cloudformation create-stack --stack-name quirehut-demo-web --template-body file://deploy/fargate-app-spec.yaml --region eu-north-1

.aws-sts-assume-role: &aws-sts-assume-role
  - >
      export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
      $(aws sts assume-role-with-web-identity
      --role-arn ${ROLE_ARN}
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
      --web-identity-token ${GITLAB_OIDC_TOKEN}
      --duration-seconds 3600
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text))

build:
  stage: build
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  before_script:
    - *aws-sts-assume-role
    - echo "${ECS_OIDC}" > /tmp/web_identity_token
    - echo -e "[profile oidc]\nrole_arn=${ROLE_ARN}\nweb_identity_token_file=/tmp/web_identity_token" > ~/.aws/config
  script:
    - dotnet nuget add source "https://gitlab.com/api/v4/projects/64329060/packages/nuget/index.json" --name GitLab --username "gitlab-ci-token" --password "$CI_JOB_TOKEN" --store-password-in-clear-text
    - chmod +x ./build.sh
    - ./build.sh 